{"name": "test_filling_form_personal_data[automation-practice-form]", "status": "broken", "statusDetails": {"message": "TypeError: Object of type SharedBrowser is not JSON serializable", "trace": "url = 'automation-practice-form'\n\n    @pytest.mark.parametrize('url', ['automation-practice-form'])\n    def test_filling_form_personal_data(url):\n        pp = PracticePage()\n        student_alex = Student(\n            first_name='Alex',\n            last_name='Po',\n            email='alexpo@email.com',\n            phone='1111111111',\n            gender=Gender.Male,\n            birthday=['09', 'October', '1991'],\n            subject='Maths',\n            hobby=[Hobby.Sports],\n            image='icons8-laptop-96.png',\n            address='NY',\n            state='NCR',\n            city='Delhi'\n        )\n        with allure.step('Open registration form'):\n            browser.open(url)\n        with allure.step('Fill registration form'):\n            pp.fill(student_alex)\n        with allure.step('Check results registration form'):\n            pp.check_results(student_alex)\n        attach.add_screenshot(browser)\n        attach.add_html(browser)\n>       attach.add_logs(browser)\n\ntests/test_lesson_9.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ndemoqa_tests/utils/attach.py:15: in add_logs\n    log = ''.join(f'{text}\\n' for text in browser.driver.get_log(log_type=browser))\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:1165: in get_log\n    return self.execute(Command.GET_LOG, {'type': log_type})['value']\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:426: in execute\n    response = self.command_executor.execute(driver_command, params)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/remote_connection.py:342: in execute\n    data = utils.dump_json(params)\nvenv/lib/python3.10/site-packages/selenium/webdriver/remote/utils.py:23: in dump_json\n    return json.dumps(json_struct)\n/usr/lib/python3.10/json/__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\n/usr/lib/python3.10/json/encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n/usr/lib/python3.10/json/encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x7f0bdd96bdf0>, o = <selene.support.shared.browser.SharedBrowser object at 0x7f0bdd481120>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type SharedBrowser is not JSON serializable\n\n/usr/lib/python3.10/json/encoder.py:179: TypeError"}, "steps": [{"name": "Open registration form", "status": "passed", "start": 1677346882527, "stop": 1677346884825}, {"name": "Fill registration form", "status": "passed", "start": 1677346884825, "stop": 1677346889358}, {"name": "Check results registration form", "status": "passed", "start": 1677346889358, "stop": 1677346891899}], "attachments": [{"name": "screenshot", "source": "85b3227e-6b77-4597-b716-c99737fc0858-attachment.png", "type": "image/png"}, {"name": "page sorce", "source": "4be606c4-7188-448f-8482-1d97019c51ff-attachment.html", "type": "text/html"}], "parameters": [{"name": "url", "value": "'automation-practice-form'"}], "start": 1677346882527, "stop": 1677346893410, "uuid": "dc82f281-4536-4489-b25f-74e245084391", "historyId": "77630d3a9cbf41aa162654ce3ba9596b", "testCaseId": "4af8f388ff0ac9bc69aefa4aec2eb392", "fullName": "tests.test_lesson_9#test_filling_form_personal_data", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_lesson_9"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "38621-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_lesson_9"}]}