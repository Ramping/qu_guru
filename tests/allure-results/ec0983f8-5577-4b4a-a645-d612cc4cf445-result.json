{"name": "test_filling_form_personal_data[automation-practice-form]", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).send keys\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : /home/vboxuser/Documents/qu_guru/tests/resources/icons8-laptop-96.png\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x55aa0ec0c013 <unknown>\n#1 0x55aa0e96ea08 <unknown>\n#2 0x55aa0e99ddd6 <unknown>\n#3 0x55aa0e9c2932 <unknown>\n#4 0x55aa0e9996d3 <unknown>\n#5 0x55aa0e9c2a3e <unknown>\n#6 0x55aa0e9d5b94 <unknown>\n#7 0x55aa0e9c2823 <unknown>\n#8 0x55aa0e99808a <unknown>\n#9 0x55aa0e9991e5 <unknown>\n#10 0x55aa0ec39e5d <unknown>\n#11 0x55aa0ec53061 <unknown>\n#12 0x55aa0ec3bbb5 <unknown>\n#13 0x55aa0ec53e08 <unknown>\n#14 0x55aa0ec2f2f0 <unknown>\n#15 0x55aa0ec6f988 <unknown>\n#16 0x55aa0ec6fb08 <unknown>\n#17 0x55aa0ec895dd <unknown>\n#18 0x7f09854cf609 <unknown>\n\nScreenshot: file:///home/vboxuser/.selene/screenshots/1677345506041/1677345506042.png\nPageSource: file:///home/vboxuser/.selene/screenshots/1677345506041/1677345506042.html", "trace": "fn = <selene.core.wait.Command object at 0x7ff687e17b80>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n../venv/lib/python3.10/site-packages/selene/core/wait.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selene.core.wait.Command object at 0x7ff687e17b80>\nentity = <selene.core.entity.Element object at 0x7ff687e17df0>\n\n    def __call__(self, entity: T) -> R:\n>       return self._fn(entity)\n\n../venv/lib/python3.10/site-packages/selene/core/wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nelement = <selene.core.entity.Element object at 0x7ff687e17df0>\n\n>       'send keys', lambda element: element().send_keys(*value)\n    )\n\n../venv/lib/python3.10/site-packages/selene/core/entity.py:467: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"0d2389896594614c47c48b969b24851b\", element=\"4baa4092-6c3e-4451-9b12-1ffa7605d553\")>\nvalue = ('/home/vboxuser/Documents/qu_guru/tests/resources/icons8-laptop-96.png',)\nlocal_files = [None]\n\n    def send_keys(self, *value) -> None:\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n    \n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_files = list(map(lambda keys_to_send:\n                                   self.parent.file_detector.is_local_file(str(keys_to_send)),\n                                   ''.join(map(str, value)).split('\\n')))\n            if None not in local_files:\n                remote_files = []\n                for file in local_files:\n                    remote_files.append(self._upload(file))\n                value = '\\n'.join(remote_files)\n    \n>       self._execute(Command.SEND_KEYS_TO_ELEMENT,\n                      {'text': \"\".join(keys_to_typing(value)),\n                       'value': keys_to_typing(value)})\n\n../venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:223: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"0d2389896594614c47c48b969b24851b\", element=\"4baa4092-6c3e-4451-9b12-1ffa7605d553\")>\ncommand = 'sendKeysToElement'\nparams = {'id': '4baa4092-6c3e-4451-9b12-1ffa7605d553', 'sessionId': '0d2389896594614c47c48b969b24851b', 'text': '/home/vboxuser/Documents/qu_guru/tests/resources/icons8-laptop-96.png', 'value': ['/', 'h', 'o', 'm', 'e', '/', ...]}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n../venv/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:396: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"0d2389896594614c47c48b969b24851b\")>\ndriver_command = 'sendKeysToElement'\nparams = {'id': '4baa4092-6c3e-4451-9b12-1ffa7605d553', 'text': '/home/vboxuser/Documents/qu_guru/tests/resources/icons8-laptop-96.png', 'value': ['/', 'h', 'o', 'm', 'e', '/', ...]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n../venv/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff687e14490>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : /home/vbo...\\\\n#16 0x55aa0ec6fb08 \\\\u003Cunknown>\\\\n#17 0x55aa0ec895dd \\\\u003Cunknown>\\\\n#18 0x7f09854cf609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : /home/vboxuser/Documents/qu_guru/tests/resources/icons8-laptop-96.png\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       #0 0x55aa0ec0c013 <unknown>\nE       #1 0x55aa0e96ea08 <unknown>\nE       #2 0x55aa0e99ddd6 <unknown>\nE       #3 0x55aa0e9c2932 <unknown>\nE       #4 0x55aa0e9996d3 <unknown>\nE       #5 0x55aa0e9c2a3e <unknown>\nE       #6 0x55aa0e9d5b94 <unknown>\nE       #7 0x55aa0e9c2823 <unknown>\nE       #8 0x55aa0e99808a <unknown>\nE       #9 0x55aa0e9991e5 <unknown>\nE       #10 0x55aa0ec39e5d <unknown>\nE       #11 0x55aa0ec53061 <unknown>\nE       #12 0x55aa0ec3bbb5 <unknown>\nE       #13 0x55aa0ec53e08 <unknown>\nE       #14 0x55aa0ec2f2f0 <unknown>\nE       #15 0x55aa0ec6f988 <unknown>\nE       #16 0x55aa0ec6fb08 <unknown>\nE       #17 0x55aa0ec895dd <unknown>\nE       #18 0x7f09854cf609 <unknown>\n\n../venv/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\nurl = 'automation-practice-form'\n\n    @pytest.mark.parametrize('url', ['automation-practice-form'])\n    def test_filling_form_personal_data(url):\n    \n        options = Options()\n        selenoid_capabilities = {\n            \"browserName\": \"chrome\",\n            \"browserVersion\": \"100.0\",\n            \"selenoid:options\": {\n                \"enableVNC\": True,\n                \"enableVideo\": False\n            }\n        }\n        options.capabilities.update(selenoid_capabilities)\n        driver = webdriver.Remote(\n            command_executor=\"https://user1:1234@selenoid.autotests.cloud/wd/hub\",\n            options=options)\n        browser.config.driver = driver\n    \n        pp = PracticePage()\n        student_alex = Student(\n            first_name='Alex',\n            last_name='Po',\n            email='alexpo@email.com',\n            phone='1111111111',\n            gender=Gender.Male,\n            birthday=['09', 'October', '1991'],\n            subject='Maths',\n            hobby=[Hobby.Sports],\n            image='icons8-laptop-96.png',\n            address='NY',\n            state='NCR',\n            city='Delhi'\n        )\n        browser.open(url)\n>       pp.fill(student_alex)\n\ntest_lesson_9.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../demoqa_tests/model/pages/practice_form.py:77: in fill\n    .address(student).country(student).city(student).insert_image(student).submit()\n../demoqa_tests/model/pages/practice_form.py:51: in insert_image\n    self.bf.send_key('#uploadPicture', images(student.image))\n../demoqa_tests/base_methods.py:20: in send_key\n    self.element(locator).send_keys(value)\n../venv/lib/python3.10/site-packages/selene/core/entity.py:466: in send_keys\n    self.wait.command(\n../venv/lib/python3.10/site-packages/selene/core/wait.py:158: in command\n    self.for_(Command(description, fn))\n../venv/lib/python3.10/site-packages/selene/core/wait.py:147: in for_\n    return _(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x7ff687e17b80>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n    \n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '#uploadPicture')).send keys\nE                   \nE                   Reason: InvalidArgumentException: Message: invalid argument: File not found : /home/vboxuser/Documents/qu_guru/tests/resources/icons8-laptop-96.png\nE                     (Session info: chrome=100.0.4896.60)\nE                   Stacktrace:\nE                   #0 0x55aa0ec0c013 <unknown>\nE                   #1 0x55aa0e96ea08 <unknown>\nE                   #2 0x55aa0e99ddd6 <unknown>\nE                   #3 0x55aa0e9c2932 <unknown>\nE                   #4 0x55aa0e9996d3 <unknown>\nE                   #5 0x55aa0e9c2a3e <unknown>\nE                   #6 0x55aa0e9d5b94 <unknown>\nE                   #7 0x55aa0e9c2823 <unknown>\nE                   #8 0x55aa0e99808a <unknown>\nE                   #9 0x55aa0e9991e5 <unknown>\nE                   #10 0x55aa0ec39e5d <unknown>\nE                   #11 0x55aa0ec53061 <unknown>\nE                   #12 0x55aa0ec3bbb5 <unknown>\nE                   #13 0x55aa0ec53e08 <unknown>\nE                   #14 0x55aa0ec2f2f0 <unknown>\nE                   #15 0x55aa0ec6f988 <unknown>\nE                   #16 0x55aa0ec6fb08 <unknown>\nE                   #17 0x55aa0ec895dd <unknown>\nE                   #18 0x7f09854cf609 <unknown>\nE                   \nE                   Screenshot: file:///home/vboxuser/.selene/screenshots/1677345506041/1677345506042.png\nE                   PageSource: file:///home/vboxuser/.selene/screenshots/1677345506041/1677345506042.html\n\n../venv/lib/python3.10/site-packages/selene/core/wait.py:145: TimeoutException"}, "parameters": [{"name": "url", "value": "'automation-practice-form'"}], "start": 1677345506173, "stop": 1677345526671, "uuid": "415d58f3-1d17-489b-8e37-c8ecc04f7383", "historyId": "77630d3a9cbf41aa162654ce3ba9596b", "testCaseId": "4af8f388ff0ac9bc69aefa4aec2eb392", "fullName": "tests.test_lesson_9#test_filling_form_personal_data", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_lesson_9"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "37133-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_lesson_9"}]}